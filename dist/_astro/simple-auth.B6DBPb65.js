let a=null,u=null,i=[{id:"1",email:"test@example.com",fullName:"Test User",phone:"+1234567890",companyName:"Test Company",password:"password123"},{id:"2",email:"admin@example.com",fullName:"Admin User",phone:"+9876543210",companyName:"Admin Company",password:"admin123"},{id:"3",email:"demo@example.com",fullName:"Demo User",phone:"+5555555555",companyName:"Demo Company",password:"demo123"}];const r={getItem:s=>{if(typeof window<"u"&&window.localStorage)try{return window.localStorage.getItem(s)}catch(l){return console.warn("localStorage access failed:",l),null}return null},setItem:(s,l)=>{if(typeof window<"u"&&window.localStorage)try{window.localStorage.setItem(s,l)}catch(e){console.warn("localStorage set failed:",e)}},removeItem:s=>{if(typeof window<"u"&&window.localStorage)try{window.localStorage.removeItem(s)}catch(l){console.warn("localStorage remove failed:",l)}}},d=()=>{if(!(typeof window>"u"))try{const s=r.getItem("simple-auth-users");if(s)try{const o=JSON.parse(s),n=new Set(i.map(t=>t.email));o.forEach(t=>{n.has(t.email)||(i.push(t),n.add(t.email))})}catch(o){console.warn("Failed to parse stored users:",o)}const l=r.getItem("simple-auth-user"),e=r.getItem("simple-auth-session");if(l&&e)try{const o=JSON.parse(l),n=JSON.parse(e);let t=i.find(m=>m.id===o.id);!t&&o.email&&(t=i.find(m=>m.email===o.email)),t||(console.log("User not found in mockUsers, creating from stored data:",o.email),t={id:o.id,email:o.email,fullName:o.fullName||"",phone:o.phone||"",companyName:o.companyName||"",password:"stored_user"},i.push(t),r.setItem("simple-auth-users",JSON.stringify(i)),console.log("Added user to mockUsers:",t.email)),t&&(a=t,u=n,console.log("Restored user session:",t.email))}catch(o){console.warn("Failed to parse stored user/session:",o),r.removeItem("simple-auth-user"),r.removeItem("simple-auth-session")}}catch(s){console.warn("Failed to initialize auth from localStorage:",s)}},p={init:()=>{d()},signUp:async(s,l,e)=>{if(i.find(f=>f.email===s))throw new Error("User already exists");const n={id:Date.now().toString(),email:s,fullName:e.fullName||"",phone:e.phone,companyName:e.companyName,password:l};i.push(n),r.setItem("simple-auth-users",JSON.stringify(i));const t={user:n,accessToken:`token_${Date.now()}`,refreshToken:`refresh_${Date.now()}`};a=n,u=t;const{password:m,...c}=n;return r.setItem("simple-auth-user",JSON.stringify(c)),r.setItem("simple-auth-session",JSON.stringify(t)),console.log("User created successfully:",{email:n.email,id:n.id}),console.log("Total users in system:",i.length),{user:n,session:t}},signIn:async(s,l)=>{console.log("Attempting to sign in with:",s),console.log("Available users:",i.map(m=>({email:m.email,id:m.id})));const e=i.find(m=>m.email===s);if(!e)throw console.log("User not found:",s),new Error("Invalid credentials");if(console.log("User found:",{email:e.email,id:e.id}),e.password!==l)throw console.log("Password mismatch for user:",s),console.log("Expected:",e.password,"Got:",l),new Error("Invalid credentials");console.log("Password verified successfully for user:",s);const o={user:e,accessToken:`token_${Date.now()}`,refreshToken:`refresh_${Date.now()}`};a=e,u=o;const{password:n,...t}=e;return r.setItem("simple-auth-user",JSON.stringify(t)),r.setItem("simple-auth-session",JSON.stringify(o)),console.log("Login successful for user:",s),console.log("Session created:",{accessToken:o.accessToken,refreshToken:o.refreshToken}),{user:e,session:o}},signOut:async()=>{a=null,u=null,r.removeItem("simple-auth-user"),r.removeItem("simple-auth-session")},getCurrentUser:()=>{if(a)return a;const s=r.getItem("simple-auth-user"),l=r.getItem("simple-auth-session");if(s&&l)try{const e=JSON.parse(s),o=JSON.parse(l);let n=i.find(t=>t.id===e.id);if(!n&&e.email&&(n=i.find(t=>t.email===e.email)),n||(n={id:e.id,email:e.email,fullName:e.fullName||"",phone:e.phone||"",companyName:e.companyName||"",password:"stored_user"},i.push(n),r.setItem("simple-auth-users",JSON.stringify(i))),n)return a=n,u=o,a}catch(e){console.warn("Failed to restore user from localStorage:",e),r.removeItem("simple-auth-user"),r.removeItem("simple-auth-session")}return null},isAuthenticated:()=>{if(console.log("Checking authentication status..."),a)return console.log("User authenticated from memory:",a.email),!0;const s=r.getItem("simple-auth-user"),l=r.getItem("simple-auth-session");if(console.log("Stored user:",s?"exists":"none"),console.log("Stored session:",l?"exists":"none"),s&&l)try{const e=JSON.parse(s),o=JSON.parse(l);console.log("Parsed user ID:",e.id);const n=i.find(t=>t.id===e.id);return n?(a=n,u=o,console.log("User authenticated from localStorage:",n.email),!0):(console.log("User not found in mockUsers, clearing invalid data"),r.removeItem("simple-auth-user"),r.removeItem("simple-auth-session"),!1)}catch(e){return console.warn("Failed to parse stored user/session:",e),r.removeItem("simple-auth-user"),r.removeItem("simple-auth-session"),!1}return console.log("No valid authentication found"),!1},getCurrentSession:()=>{if(u)return u;const s=r.getItem("simple-auth-session");if(s)try{return u=JSON.parse(s),u}catch{r.removeItem("simple-auth-session")}return null},debugUsers:()=>(console.log("All users in system:",i),i),checkUserExists:s=>i.some(l=>l.email===s),updateProfile:async s=>{if(!a)throw new Error("No user is currently authenticated");Object.assign(a,s);const{password:l,...e}=a;r.setItem("simple-auth-user",JSON.stringify(e));const o=i.findIndex(n=>n.id===a.id);return o!==-1&&(i[o]={...a}),r.setItem("simple-auth-users",JSON.stringify(i)),console.log("Profile updated successfully for user:",a.email),a},changePassword:async(s,l)=>{if(!a)throw new Error("No user is currently authenticated");if(a.password!==s)throw new Error("Current password is incorrect");a.password=l;const e=i.findIndex(o=>o.id===a.id);e!==-1&&(i[e]={...a}),r.setItem("simple-auth-users",JSON.stringify(i)),console.log("Password changed successfully for user:",a.email)},resetPassword:async(s,l,e)=>{const o=i.find(t=>t.email===s);if(!o)throw new Error("User not found");o.password=e;const n=i.findIndex(t=>t.id===o.id);if(n!==-1&&(i[n]={...o}),r.setItem("simple-auth-users",JSON.stringify(i)),a&&a.email===s){a.password=e;const{password:t,...m}=a;r.setItem("simple-auth-user",JSON.stringify(m))}console.log("Password reset successfully for user:",o.email)}};typeof window<"u"&&(d(),document.readyState==="loading"&&document.addEventListener("DOMContentLoaded",d));export{p as s};
