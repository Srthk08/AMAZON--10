---
import Layout from '../layouts/Layout.astro';
import AuthGuard from '../components/AuthGuard.astro';
---

<Layout title="Support & Help Center - DevExpress">
  <AuthGuard>
    <div class="min-h-screen bg-gray-50 py-12">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="text-center mb-12">
          <h1 class="text-4xl font-bold text-gray-900 mb-4">Support & Help Center</h1>
          <p class="text-xl text-gray-600">Get help with your orders, technical issues, or general questions</p>
        </div>

                          <!-- Notifications Banner -->
         <div id="notifications-banner" class="hidden bg-blue-50 border border-blue-200 rounded-lg p-4 mb-8">
           <div class="flex items-center justify-between">
             <div class="flex items-center">
               <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
               </svg>
               <span class="text-blue-800 font-medium">You have new updates on your support tickets!</span>
             </div>
             <button onclick="openNotificationsModal()" class="text-blue-600 hover:text-blue-800 font-medium">
               View All
             </button>
           </div>
         </div>

         <!-- Support Options -->
          <div class="flex justify-center mb-12">
            <!-- Create Support Ticket -->
            <div class="bg-white rounded-xl shadow-lg p-8 max-w-md">
              <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h3 class="text-xl font-semibold text-gray-900 mb-4 text-center">Create Support Ticket</h3>
              <p class="text-gray-600 mb-6 text-center">Submit a new support ticket for technical issues, billing questions, or feature requests</p>
              <button 
                onclick="openTicketModal()"
                class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium px-6 py-3 rounded-lg transition-all transform hover:scale-105 shadow-lg hover:shadow-xl"
              >
                Create Ticket
              </button>
            </div>
            
            <!-- View My Tickets -->
            <div class="bg-white rounded-xl shadow-lg p-8 max-w-md ml-8">
              <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6 relative">
                <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <!-- Notification Badge -->
                <div id="ticket-notification-badge" class="hidden absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold">
                  0
                </div>
              </div>
              <h3 class="text-xl font-semibold text-gray-900 mb-4 text-center">View My Tickets</h3>
              <p class="text-gray-600 mb-6 text-center">Check the status of your support tickets and view admin replies</p>
              <button 
                onclick="openMyTicketsModal()"
                class="w-full bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-all transform hover:scale-105 shadow-lg hover:shadow-xl"
              >
                View Tickets
              </button>
            </div>
          </div>

        <!-- FAQ Section -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6">Frequently Asked Questions</h2>
          <div class="space-y-4">
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">How long does it take to complete my order?</h3>
              <p class="text-gray-600">Most orders are completed within 1-3 business days depending on complexity. You'll receive updates throughout the process.</p>
            </div>
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Can I modify my order after placing it?</h3>
              <p class="text-gray-600">Yes, you can request modifications within 24 hours of placing your order. Contact support for assistance.</p>
            </div>
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">What payment methods do you accept?</h3>
              <p class="text-gray-600">We accept credit cards, UPI, and net banking. All payments are secure and processed through trusted payment gateways.</p>
            </div>
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">How do I track my order progress?</h3>
              <p class="text-gray-600">You can track your order in real-time through your dashboard. We also send email updates at each stage.</p>
            </div>
            <div class="pb-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">What if I'm not satisfied with the result?</h3>
              <p class="text-gray-600">We offer unlimited revisions until you're completely satisfied. Your satisfaction is our top priority.</p>
            </div>
          </div>
        </div>

        <!-- Contact Information -->
        <div class="bg-white rounded-xl shadow-lg p-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6">Other Ways to Get Help</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="text-center">
              <div class="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
              </div>
              <h3 class="font-semibold text-gray-900 mb-2">Email Support</h3>
              <p class="text-gray-600 text-sm">support@devexpress.com</p>
            </div>
            <div class="text-center">
              <div class="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                </svg>
              </div>
              <h3 class="font-semibold text-gray-900 mb-2">Phone Support</h3>
              <p class="text-gray-600 text-sm">+91 98765 43210</p>
            </div>
            <div class="text-center">
              <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h3 class="font-semibold text-gray-900 mb-2">Response Time</h3>
              <p class="text-gray-600 text-sm">Within 2-4 hours</p>
            </div>
          </div>
        </div>
      </div>
    </div>

         <!-- Notifications Modal -->
     <div id="notificationsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
       <div class="flex items-center justify-center min-h-screen p-4">
         <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
           <div class="flex items-center justify-between p-6 border-b border-gray-200">
             <h3 class="text-xl font-semibold text-gray-900">Support Ticket Notifications</h3>
             <button onclick="closeNotificationsModal()" class="text-gray-400 hover:text-gray-600">
               <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
               </svg>
             </button>
           </div>
           
           <div class="p-6">
             <div id="notifications-list" class="space-y-4">
               <!-- Notifications will be loaded here -->
             </div>
             
             <div id="no-notifications" class="hidden text-center py-8">
               <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                 <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                 </svg>
               </div>
               <p class="text-gray-500">No notifications found</p>
             </div>
           </div>
         </div>
       </div>
     </div>

     <!-- My Tickets Modal -->
     <div id="myTicketsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
       <div class="flex items-center justify-center min-h-screen p-4">
         <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
           <div class="flex items-center justify-between p-6 border-b border-gray-200">
             <h3 class="text-xl font-semibold text-gray-900">My Support Tickets</h3>
             <button onclick="closeMyTicketsModal()" class="text-gray-400 hover:text-gray-600">
               <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
               </svg>
             </button>
           </div>
           
           <div class="p-6">
             <div id="my-tickets-list" class="space-y-4">
               <!-- Tickets will be loaded here -->
             </div>
             
             <div id="no-tickets" class="hidden text-center py-8">
               <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                 <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                 </svg>
               </div>
               <p class="text-gray-500">No support tickets found</p>
             </div>
           </div>
         </div>
       </div>
     </div>

    <!-- Support Ticket Modal -->
    <div id="ticketModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div class="p-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h3 class="text-xl font-semibold text-gray-900">Create Support Ticket</h3>
              <button onclick="closeTicketModal()" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <form id="ticketForm" class="p-6 space-y-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Subject *</label>
              <input 
                type="text" 
                id="ticketSubject" 
                required
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Brief description of your issue"
              >
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Category *</label>
              <select 
                id="ticketCategory" 
                required
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Select a category</option>
                <option value="technical">Technical Issue</option>
                <option value="billing">Billing & Payment</option>
                <option value="general">General Question</option>
                <option value="feature_request">Feature Request</option>
              </select>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Priority *</label>
              <select 
                id="ticketPriority" 
                required
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Select priority level</option>
                <option value="low">Low - General inquiry</option>
                <option value="medium">Medium - Minor issue</option>
                <option value="high">High - Important issue</option>
                <option value="urgent">Urgent - Critical issue</option>
              </select>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Description *</label>
              <textarea 
                id="ticketDescription" 
                required
                rows="6"
                class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Please provide detailed information about your issue, including steps to reproduce if applicable..."
              ></textarea>
            </div>

            <div class="flex justify-end space-x-4 pt-4">
              <button 
                type="button" 
                onclick="closeTicketModal()"
                class="px-6 py-3 border-2 border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button 
                type="submit"
                class="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
              >
                Submit Ticket
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    
  </AuthGuard>
</Layout>

<script>
  import { sharedDataStore } from '../lib/shared-data-store';

  // Modal functions
  function openTicketModal() {
    console.log('Opening ticket modal...');
    const modal = document.getElementById('ticketModal');
    if (modal) {
      modal.classList.remove('hidden');
      console.log('Ticket modal opened successfully');
    } else {
      console.error('Ticket modal element not found');
    }
  }

  function closeTicketModal() {
    console.log('Closing ticket modal...');
    const modal = document.getElementById('ticketModal');
    const form = document.getElementById('ticketForm');
    if (modal) {
      modal.classList.add('hidden');
      if (form) {
        form.reset();
      }
      console.log('Ticket modal closed successfully');
    } else {
      console.error('Ticket modal element not found');
    }
  }

  // My Tickets Modal functions
  function openMyTicketsModal() {
    console.log('Opening my tickets modal...');
    const modal = document.getElementById('myTicketsModal');
    if (modal) {
      modal.classList.remove('hidden');
      loadMyTickets();
      console.log('My tickets modal opened successfully');
    } else {
      console.error('My tickets modal element not found');
    }
  }

  function closeMyTicketsModal() {
    console.log('Closing my tickets modal...');
    const modal = document.getElementById('myTicketsModal');
    if (modal) {
      modal.classList.add('hidden');
      console.log('My tickets modal closed successfully');
    } else {
      console.error('My tickets modal element not found');
    }
  }

  function loadMyTickets() {
    const currentUser = JSON.parse(localStorage.getItem('simple-auth-user') || '{}');
    if (!currentUser.email) {
      alert('Please login to view your tickets');
      return;
    }

    try {
      const myTickets = sharedDataStore.getTicketsByUser(currentUser.email);
      const ticketsList = document.getElementById('my-tickets-list');
      const noTickets = document.getElementById('no-tickets');

      if (myTickets.length === 0) {
        ticketsList.classList.add('hidden');
        noTickets.classList.remove('hidden');
        return;
      }

      noTickets.classList.add('hidden');
      ticketsList.classList.remove('hidden');

      ticketsList.innerHTML = myTickets.map(ticket => `
        <div class="border border-gray-200 rounded-lg p-4">
          <div class="flex items-center justify-between mb-3">
            <div class="flex items-center space-x-3">
              <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getPriorityColor(ticket.priority)}">
                ${ticket.priority}
              </span>
              <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(ticket.status)}">
                ${ticket.status.replace('_', ' ')}
              </span>
            </div>
            <span class="text-sm text-gray-500">${new Date(ticket.createdAt).toLocaleDateString()}</span>
          </div>
          
          <h4 class="font-semibold text-gray-900 mb-2">${ticket.subject}</h4>
          <p class="text-gray-600 text-sm mb-3">${ticket.description}</p>
          
          ${ticket.adminReplies && ticket.adminReplies.length > 0 ? `
            <div class="bg-blue-50 border-l-4 border-blue-400 p-3 rounded">
              <h5 class="font-medium text-blue-800 mb-2">Admin Reply:</h5>
              ${ticket.adminReplies.map(reply => `
                <div class="mb-2">
                  <p class="text-blue-700 text-sm">${reply.message}</p>
                  <p class="text-blue-600 text-xs">${new Date(reply.timestamp).toLocaleString()}</p>
                </div>
              `).join('')}
            </div>
          ` : `
            <div class="bg-gray-50 p-3 rounded">
              <p class="text-gray-600 text-sm">No admin reply yet. We'll respond within 2-4 hours.</p>
            </div>
          `}
        </div>
      `).join('');
    } catch (error) {
      console.error('Error loading tickets:', error);
      alert('Error loading tickets. Please try again.');
    }
  }

  function getPriorityColor(priority) {
    const colors = {
      'low': 'bg-green-100 text-green-800',
      'medium': 'bg-yellow-100 text-yellow-800',
      'high': 'bg-orange-100 text-orange-800',
      'urgent': 'bg-red-100 text-red-800'
    };
    return colors[priority] || 'bg-gray-100 text-gray-800';
  }

  function getStatusColor(status) {
    const colors = {
      'open': 'bg-blue-100 text-blue-800',
      'in_progress': 'bg-yellow-100 text-yellow-800',
      'resolved': 'bg-green-100 text-green-800',
      'closed': 'bg-gray-100 text-gray-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  }

  

  

  // Handle ticket form submission
  document.getElementById('ticketForm').addEventListener('submit', function(e) {
    e.preventDefault();
    console.log('Ticket form submitted...');
    
    const currentUser = JSON.parse(localStorage.getItem('simple-auth-user') || '{}');
    if (!currentUser.email) {
      alert('Please login to create a support ticket');
      return;
    }

    const ticketData = {
      userId: currentUser.email,
      customerName: currentUser.fullName || 'User',
      customerEmail: currentUser.email,
      subject: document.getElementById('ticketSubject').value,
      description: document.getElementById('ticketDescription').value,
      priority: document.getElementById('ticketPriority').value,
      category: document.getElementById('ticketCategory').value,
      status: 'open'
    };

    console.log('Creating ticket with data:', ticketData);

    try {
      const ticket = sharedDataStore.createSupportTicket(ticketData);
      console.log('Ticket created successfully:', ticket);
      
      // Verify ticket was saved
      const allTickets = sharedDataStore.getSupportTickets();
      console.log('All tickets in shared store:', allTickets);
      
      alert(`Support ticket created successfully! Ticket #${ticket.ticketNumber}`);
      closeTicketModal();
      
      // Refresh the page to show the new ticket
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error) {
      console.error('Error creating ticket:', error);
      alert('Error creating support ticket. Please try again.');
    }
  });



  // Close modals when clicking outside
  document.getElementById('ticketModal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeTicketModal();
    }
  });

  

  // Notifications Modal functions
  function openNotificationsModal() {
    console.log('Opening notifications modal...');
    const modal = document.getElementById('notificationsModal');
    if (modal) {
      modal.classList.remove('hidden');
      loadNotifications();
      console.log('Notifications modal opened successfully');
    } else {
      console.error('Notifications modal element not found');
    }
  }

  function closeNotificationsModal() {
    console.log('Closing notifications modal...');
    const modal = document.getElementById('notificationsModal');
    if (modal) {
      modal.classList.add('hidden');
      console.log('Notifications modal closed successfully');
    } else {
      console.error('Notifications modal element not found');
    }
  }

  function loadNotifications() {
    const currentUser = JSON.parse(localStorage.getItem('simple-auth-user') || '{}');
    if (!currentUser.email) {
      alert('Please login to view notifications');
      return;
    }

    try {
      const notifications = sharedDataStore.getUserNotifications(currentUser.email);
      const notificationsList = document.getElementById('notifications-list');
      const noNotifications = document.getElementById('no-notifications');

      if (notifications.length === 0) {
        notificationsList.classList.add('hidden');
        noNotifications.classList.remove('hidden');
        return;
      }

      noNotifications.classList.add('hidden');
      notificationsList.classList.remove('hidden');

      notificationsList.innerHTML = notifications.map(notification => `
        <div class="border border-gray-200 rounded-lg p-4 ${notification.read ? 'bg-gray-50' : 'bg-blue-50'}">
          <div class="flex items-center justify-between mb-3">
            <div class="flex items-center space-x-3">
              ${!notification.read ? '<div class="w-2 h-2 bg-blue-500 rounded-full"></div>' : ''}
              <span class="text-sm text-gray-500">${new Date(notification.timestamp).toLocaleString()}</span>
            </div>
            <span class="text-xs text-gray-400">Ticket #${notification.ticketId}</span>
          </div>
          
          <h4 class="font-semibold text-gray-900 mb-2">${notification.subject}</h4>
          <div class="text-gray-700 text-sm whitespace-pre-line">${notification.message}</div>
          
          <div class="mt-3 flex justify-end">
            <button 
              onclick="markNotificationAsRead('${notification.timestamp}')"
              class="text-sm text-blue-600 hover:text-blue-800"
            >
              ${notification.read ? 'Marked as Read' : 'Mark as Read'}
            </button>
          </div>
        </div>
      `).join('');
    } catch (error) {
      console.error('Error loading notifications:', error);
      alert('Error loading notifications. Please try again.');
    }
  }

  function markNotificationAsRead(notificationId) {
    try {
      sharedDataStore.markNotificationAsRead(notificationId);
      loadNotifications();
      updateNotificationBadge();
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  }

  // Update notification badge
  function updateNotificationBadge() {
    const currentUser = JSON.parse(localStorage.getItem('simple-auth-user') || '{}');
    if (!currentUser.email) return;

    try {
      const notifications = sharedDataStore.getUserNotifications(currentUser.email);
      const unreadCount = notifications.filter(n => !n.read).length;
      const badge = document.getElementById('ticket-notification-badge');
      const banner = document.getElementById('notifications-banner');

      if (badge) {
        if (unreadCount > 0) {
          badge.classList.remove('hidden');
          badge.textContent = unreadCount > 9 ? '9+' : unreadCount.toString();
        } else {
          badge.classList.add('hidden');
        }
      }

      if (banner) {
        if (unreadCount > 0) {
          banner.classList.remove('hidden');
        } else {
          banner.classList.add('hidden');
        }
      }
    } catch (error) {
      console.error('Error updating notification badge:', error);
    }
  }

  // Real-time updates - check for new notifications every 30 seconds
  function startRealTimeUpdates() {
    setInterval(() => {
      updateNotificationBadge();
    }, 30000); // Check every 30 seconds
  }

  // Request browser notification permission
  function requestNotificationPermission() {
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          console.log('Browser notifications enabled');
        }
      });
    }
  }

  // Initialize page
  function initializeSupportPage() {
    requestNotificationPermission();
    updateNotificationBadge();
    startRealTimeUpdates();
  }

     // Make functions globally available for onclick handlers
   (window as any).openTicketModal = openTicketModal;
   (window as any).closeTicketModal = closeTicketModal;
   (window as any).openMyTicketsModal = openMyTicketsModal;
   (window as any).closeMyTicketsModal = closeMyTicketsModal;
   (window as any).openNotificationsModal = openNotificationsModal;
   (window as any).closeNotificationsModal = closeNotificationsModal;
   (window as any).markNotificationAsRead = markNotificationAsRead;

   // Initialize page when DOM loads
   document.addEventListener('DOMContentLoaded', initializeSupportPage);
</script>
