---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Sign In - DevExpress">
  <section class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
      <div class="flex justify-center">
        <div class="w-12 h-12 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center">
          <span class="text-white font-bold text-xl">24</span>
        </div>
      </div>
      <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
        Sign in to your account
      </h2>
      <p class="mt-2 text-center text-sm text-gray-600">
        Or{' '}
        <a href="/signup" class="font-medium text-primary-600 hover:text-primary-500 transition-colors">
          create a new account
        </a>
      </p>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
      <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <form id="login-form" class="space-y-6">
          <!-- Error Message -->
          <div id="error-message" class="hidden p-4 bg-red-50 border border-red-200 rounded-lg">
            <div class="flex">
              <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
              </svg>
              <span id="error-text" class="text-red-800">An error occurred during sign in.</span>
            </div>
          </div>

          <!-- Success Message -->
          <div id="success-message" class="hidden p-4 bg-green-50 border border-green-200 rounded-lg">
            <div class="flex">
              <svg class="w-5 h-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
              </svg>
              <span id="success-text" class="text-green-800">Login successful! Redirecting...</span>
            </div>
          </div>

          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">
              Email address
            </label>
            <div class="mt-1">
              <input
                id="email"
                name="email"
                type="email"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                placeholder="Enter your email address"
              />
            </div>
          </div>

          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">
              Password
            </label>
            <div class="mt-1">
              <input
                id="password"
                name="password"
                type="password"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                placeholder="Enter your password"
              />
            </div>
          </div>

          <!-- Submit Button -->
          <button
            type="submit"
            id="login-btn"
            class="w-full bg-primary-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
          >
            Sign In
          </button>

          <!-- Forgot Password Link -->
          <div class="text-center">
            <a href="/forgot-password" class="text-sm text-primary-600 hover:text-primary-500 transition-colors">
              Forgot your password?
            </a>
          </div>

          <!-- Sign Up Link -->
          <div class="text-center text-sm text-gray-600">
            Don't have an account?
            <a href="/signup" class="text-primary-600 hover:text-primary-500 font-medium transition-colors">
              Sign up here
            </a>
          </div>
        </form>
      </div>
    </div>
  </section>

  <script>
    import { supabase } from '../lib/supabase';

    // Get DOM elements
    const form = document.getElementById('login-form') as HTMLFormElement;
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    const successMessage = document.getElementById('success-message');
    const successText = document.getElementById('success-text');

    // Handle form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const email = formData.get('email') as string;
      const password = formData.get('password') as string;

      // Basic validation
      if (!email || !password) {
        if (errorText) {
          errorText.textContent = 'Please fill in all fields.';
        }
        errorMessage?.classList.remove('hidden');
        return;
      }

      // Email validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        if (errorText) {
          errorText.textContent = 'Please enter a valid email address.';
        }
        errorMessage?.classList.remove('hidden');
        return;
      }

      // Hide previous errors and success messages
      errorMessage?.classList.add('hidden');
      successMessage?.classList.remove('hidden');

      // Show loading state
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      const originalText = submitButton.textContent;
      submitButton.disabled = true;
      submitButton.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Signing in...
      `;

      try {
        console.log('Attempting to sign in with Supabase:', email);
        
        // Sign in with Supabase
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });

        if (error) {
          console.error('Supabase sign in error:', error);
          throw error;
        }

        if (data.user) {
          console.log('User signed in successfully:', data.user.email);
          if (successText) {
            successText.textContent = 'Welcome back! Signing you in...';
          }
          successMessage?.classList.remove('hidden');

          // Fetch user profile to determine redirect and get user data
          try {
            const { data: profileData, error: profileError } = await supabase
              .from('profiles')
              .select('role, status, full_name, phone, company_name')
              .eq('id', data.user.id)
              .single();
            
            let redirectUrl = '/dashboard';
            
            if (!profileError && profileData) {
              console.log('User profile found:', profileData);
              
              // Check if user is verified
              if (profileData.status === 'pending_verification') {
                redirectUrl = '/dashboard?message=Please check your email to verify your account.&type=warning';
              } else if (profileData.status === 'suspended') {
                redirectUrl = '/dashboard?message=Your account has been suspended. Please contact support.&type=error';
              } else {
                // Role-based redirect
                if (profileData.role === 'admin' || profileData.role === 'developer' || profileData.role === 'support') {
                  redirectUrl = '/admin';
                  console.log(`Admin user detected: ${profileData.full_name} (${profileData.role})`);
                } else {
                  redirectUrl = '/dashboard';
                  console.log(`Customer user: ${profileData.full_name} (${profileData.role})`);
                }
              }

              // Create user data object for the global auth manager
              const userData = {
                id: data.user.id,
                email: data.user.email,
                full_name: profileData.full_name || data.user.email?.split('@')[0] || 'User',
                phone: profileData.phone || 'Not set',
                company_name: profileData.company_name || 'Not set',
                role: profileData.role || 'customer'
              };

              // Trigger login event for the global auth manager
              window.dispatchEvent(new CustomEvent('user-logged-in', {
                detail: userData
              }));

              console.log('âœ… User data sent to global auth manager:', userData);
            }
            
            // Redirect after successful login
            setTimeout(() => {
              window.location.href = redirectUrl;
            }, 1500);
            
          } catch (profileError) {
            console.warn('Could not fetch user profile, defaulting to dashboard:', profileError);
            
            // Create basic user data
            const userData = {
              id: data.user.id,
              email: data.user.email,
              full_name: data.user.email?.split('@')[0] || 'User',
              phone: 'Not set',
              company_name: 'Not set',
              role: 'customer'
            };

            // Trigger login event
            window.dispatchEvent(new CustomEvent('user-logged-in', {
              detail: userData
            }));

            setTimeout(() => {
              window.location.href = '/dashboard';
            }, 1500);
          }
          
        } else {
          throw new Error('Sign in failed - no user data returned');
        }
        
      } catch (error: any) {
        console.error('Login error:', error);
        
        // Show error message
        let errorMessageText = 'An error occurred during sign in.';
        
        if (error.message) {
          // Handle specific Supabase error messages
          if (error.message.includes('Invalid login credentials')) {
            errorMessageText = 'Invalid email or password. Please try again.';
          } else if (error.message.includes('Email not confirmed')) {
            errorMessageText = 'Please check your email and confirm your account before signing in.';
          } else if (error.message.includes('Too many requests')) {
            errorMessageText = 'Too many login attempts. Please try again later.';
          } else {
            errorMessageText = error.message;
          }
        }
        
        if (errorText) {
          errorText.textContent = errorMessageText;
        }
        errorMessage?.classList.remove('hidden');
        
        // Reset button
        submitButton.disabled = false;
        submitButton.textContent = originalText;
      }
    });
  </script>
</Layout>