<header class="bg-gradient-to-r from-primary-600 to-secondary-600 shadow-xl border-b border-primary-700">
  <div class="max-w-7xl mx-auto px-6 sm:px-8 lg:px-12">
    <div class="flex justify-between items-center h-24">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-4">
          <div class="w-14 h-14 bg-white bg-opacity-20 rounded-2xl flex items-center justify-center backdrop-blur-sm">
            <span class="text-white font-bold text-xl">24</span>
          </div>
          <div>
            <span class="text-3xl font-bold text-white">DevExpress</span>
            <p class="text-white text-opacity-90 -mt-1 font-medium">24 Hour Delivery</p>
          </div>
        </a>
      </div>

      <!-- Desktop Navigation - Always visible -->
      <nav id="main-navigation" class="flex items-center space-x-10">
        <a href="/" class="text-white text-opacity-90 hover:text-white px-6 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
          Home
        </a>
        <a href="/products" class="text-white text-opacity-90 hover:text-white px-6 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
          Products
        </a>
        <a href="/about" class="text-white text-opacity-90 hover:text-white px-6 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
          About
        </a>
        <a href="/contact" class="text-white text-opacity-90 hover:text-white px-6 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
          Contact
        </a>
      </nav>

      <!-- User Menu / Auth Buttons -->
      <div class="flex items-center space-x-6">
        <!-- Loading state (hidden by default) -->
        <div id="auth-loading" class="hidden">
          <div class="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center backdrop-blur-sm">
            <div class="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
          </div>
        </div>

        <!-- Auth Buttons - Only visible before login -->
        <div id="auth-buttons" class="hidden flex items-center space-x-6">
          <a href="/login" class="text-white text-opacity-90 hover:text-white px-8 py-3 text-lg font-medium transition-all duration-300 rounded-xl hover:bg-white hover:bg-opacity-20 hover:scale-105">
            Sign In
          </a>
          <a href="/signup" class="bg-white text-primary-600 hover:bg-gray-100 px-10 py-3 rounded-xl text-lg font-medium transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl font-semibold">
            Sign Up
          </a>
        </div>

        <!-- User Menu - Only visible after login -->
        <div id="user-menu" class="hidden relative">
          <button
            id="user-menu-button"
            class="flex items-center space-x-3 text-white hover:text-white transition-all duration-300 bg-white bg-opacity-20 hover:bg-opacity-30 px-6 py-3 rounded-xl backdrop-blur-sm"
          >
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center backdrop-blur-sm">
              <span id="user-avatar" class="text-white font-bold text-lg">U</span>
            </div>
            <span id="user-name" class="hidden lg:block text-lg font-medium text-white">User</span>
            <svg id="user-menu-arrow" class="w-6 h-6 text-white transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>

          <!-- Dropdown Menu -->
          <div
            id="user-dropdown"
            class="hidden absolute right-0 mt-4 w-64 bg-white rounded-2xl shadow-2xl py-3 z-50 border border-gray-100"
          >
            <div class="px-6 py-4 border-b border-gray-100 bg-gradient-to-r from-primary-50 to-secondary-50 rounded-t-2xl">
              <p class="text-sm text-gray-500">Signed in as</p>
              <p class="text-lg font-semibold text-gray-900" id="user-email">user@example.com</p>
            </div>
            <a href="/dashboard" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
              <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z"></path>
              </svg>
              Dashboard
            </a>
            <a href="/profile" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
              <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              Profile
            </a>
            <a href="/orders" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
              <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              My Orders
            </a>
            <a href="/cart" class="flex items-center px-6 py-4 text-base text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-all duration-200">
              <svg class="w-6 h-6 mr-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
              </svg>
              Cart
            </a>
            <div class="px-4 pt-4 pb-6 space-y-2 border-t border-gray-100">
              <button
                onclick="signOut()"
                class="w-full flex items-center px-6 py-4 text-base text-red-600 hover:bg-red-50 hover:text-red-700 transition-all duration-200 rounded-xl"
              >
                <svg class="w-6 h-6 mr-4 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
                Sign Out
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="lg:hidden flex items-center text-white hover:text-white transition-all duration-300 bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-3 rounded-xl backdrop-blur-sm"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="hidden lg:hidden">
      <div class="px-4 pt-4 pb-6 space-y-2 border-t border-white border-opacity-20">
        <a href="/" class="block px-6 py-4 text-lg font-medium text-white text-opacity-90 hover:text-white hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-300">
          Home
        </a>
        <a href="/products" class="block px-6 py-4 text-lg font-medium text-white text-opacity-90 hover:text-white hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-300">
          Products
        </a>
        <a href="/about" class="block px-6 py-4 text-lg font-medium text-white text-opacity-90 hover:text-white hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-300">
          About
        </a>
        <a href="/contact" class="block px-6 py-4 text-lg font-medium text-white text-opacity-90 hover:text-white hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-300">
          Contact
        </a>
      </div>
    </div>
  </div>
</header>

<script>
  import { simpleAuth } from '../lib/simple-auth';

  // Global variables
  let isUserMenuOpen = false;

  // Function to get auth state from sessionStorage for immediate access
  function getCachedAuthState() {
    try {
      const authData = sessionStorage.getItem('simple-auth-cache');
      if (authData) {
        return JSON.parse(authData);
      }
    } catch (e) {
      console.error('Error reading auth cache:', e);
    }
    return null;
  }

  // Function to update the header based on authentication state
  function updateHeader() {
    const isAuthenticated = simpleAuth.isAuthenticated();
    const authButtons = document.getElementById('auth-buttons');
    const userMenu = document.getElementById('user-menu');
    const authLoading = document.getElementById('auth-loading');
    const userEmail = document.getElementById('user-email');
    const userName = document.getElementById('user-name');
    const userAvatar = document.getElementById('user-avatar');

    // Hide loading state
    if (authLoading && !authLoading.classList.contains('hidden')) {
      authLoading.classList.add('hidden');
    }

    // Update UI based on authentication state
    if (isAuthenticated) {
      // User is logged in
      if (authButtons && !authButtons.classList.contains('hidden')) {
        authButtons.classList.add('hidden');
      }
      if (userMenu && userMenu.classList.contains('hidden')) {
        userMenu.classList.remove('hidden');
      }

      // Update user info
      const user = simpleAuth.getCurrentUser();
      if (user) {
        if (userEmail) userEmail.textContent = user.email;
        if (userName) userName.textContent = user.fullName || user.email.split('@')[0];
        if (userAvatar) userAvatar.textContent = (user.fullName || user.email).charAt(0).toUpperCase();
      }

      // Cache the auth state for faster loading on next page
      try {
        sessionStorage.setItem('simple-auth-cache', JSON.stringify({
          isAuthenticated: true,
          user: user
        }));
      } catch (e) {
        console.error('Error caching auth state:', e);
      }
    } else {
      // User is not logged in
      if (userMenu && !userMenu.classList.contains('hidden')) {
        userMenu.classList.add('hidden');
        closeUserDropdown();
      }
      if (authButtons && authButtons.classList.contains('hidden')) {
        authButtons.classList.remove('hidden');
      }

      // Cache the auth state for faster loading on next page
      try {
        sessionStorage.setItem('simple-auth-cache', JSON.stringify({
          isAuthenticated: false,
          user: null
        }));
      } catch (e) {
        console.error('Error caching auth state:', e);
      }
    }
  }

  // Function to set initial UI state based on cached auth data
  function setInitialUIState() {
    const cachedAuth = getCachedAuthState();
    const authButtons = document.getElementById('auth-buttons');
    const userMenu = document.getElementById('user-menu');
    const authLoading = document.getElementById('auth-loading');

    // Show loading state initially
    if (authLoading) {
      authLoading.classList.remove('hidden');
    }

    // Hide both auth buttons and user menu until we know the actual state
    if (authButtons && !authButtons.classList.contains('hidden')) {
      authButtons.classList.add('hidden');
    }
    if (userMenu && !userMenu.classList.contains('hidden')) {
      userMenu.classList.add('hidden');
    }

    // If we have cached data, use it to show the correct UI immediately
    if (cachedAuth) {
      if (cachedAuth.isAuthenticated) {
        if (userMenu) userMenu.classList.remove('hidden');

        // Update user info from cache
        const userEmail = document.getElementById('user-email');
        const userName = document.getElementById('user-name');
        const userAvatar = document.getElementById('user-avatar');

        if (userEmail && cachedAuth.user) userEmail.textContent = cachedAuth.user.email;
        if (userName && cachedAuth.user) {
          userName.textContent = cachedAuth.user.fullName || cachedAuth.user.email.split('@')[0];
        }
        if (userAvatar && cachedAuth.user) {
          userAvatar.textContent = (cachedAuth.user.fullName || cachedAuth.user.email).charAt(0).toUpperCase();
        }
      } else {
        if (authButtons) authButtons.classList.remove('hidden');
      }

      // Hide loading state since we have cached data
      if (authLoading) {
        authLoading.classList.add('hidden');
      }
    }
  }

  // User dropdown functionality
  function initUserDropdown() {
    const userMenuButton = document.getElementById('user-menu-button');
    const userDropdown = document.getElementById('user-dropdown');
    const userMenuArrow = document.getElementById('user-menu-arrow');

    if (userMenuButton && userDropdown && userMenuArrow) {
      userMenuButton.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        toggleUserDropdown();
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!userMenuButton.contains(e.target) && !userDropdown.contains(e.target)) {
          closeUserDropdown();
        }
      });
    }
  }

  function toggleUserDropdown() {
    const userDropdown = document.getElementById('user-dropdown');
    const userMenuArrow = document.getElementById('user-menu-arrow');

    if (userDropdown && userMenuArrow) {
      isUserMenuOpen = !isUserMenuOpen;

      if (isUserMenuOpen) {
        userDropdown.classList.remove('hidden');
        userMenuArrow.style.transform = 'rotate(180deg)';
      } else {
        userDropdown.classList.add('hidden');
        userMenuArrow.style.transform = 'rotate(0deg)';
      }
    }
  }

  function closeUserDropdown() {
    const userDropdown = document.getElementById('user-dropdown');
    const userMenuArrow = document.getElementById('user-menu-arrow');

    if (userDropdown && userMenuArrow) {
      userDropdown.classList.add('hidden');
      userMenuArrow.style.transform = 'rotate(0deg)';
      isUserMenuOpen = false;
    }
  }

  // Sign out function
  window.signOut = async function() {
    try {
      // Clear cached auth state
      sessionStorage.removeItem('simple-auth-cache');
      await simpleAuth.signOut();
      closeUserDropdown();
      updateHeader();
      window.location.href = '/';
    } catch (error) {
      console.error('Sign out error:', error);
    }
  };

  // Mobile menu functionality
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }
  }

  // Initialize everything when page loads
  document.addEventListener('DOMContentLoaded', () => {
    // Set initial UI state immediately using cached data
    setInitialUIState();

    // Then update with actual auth state (with a small delay to ensure auth is loaded)
    setTimeout(() => {
      updateHeader();
    }, 50);

    initUserDropdown();
    initMobileMenu();
  });

  // Update header when authentication state changes
  window.addEventListener('storage', (e) => {
    if (e.key === 'simple-auth-user' || e.key === 'simple-auth-session') {
      updateHeader();
    }
  });

  // Listen for custom auth events
  window.addEventListener('auth-state-changed', updateHeader);
</script>